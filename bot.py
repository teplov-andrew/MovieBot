import re
import random
import pandas as pd

import telebot
from telebot import types

from config import CFG
from kinopoisk_api import Kinopoisk
from kinomax_scrap import cinema_primers_data
from help_functions import clear_msg, clean_link


data = pd.read_csv(CFG.PATH_DATA, sep=',')
primers_data = open(CFG.PRIMERS_DATA, "r", encoding="utf8").read()

client = telebot.TeleBot(CFG.TG_BOT_TOKEN)

kino = Kinopoisk(CFG.KINOPOIS_API_KEY)




#                                                 –ü–†–ò–í–ï–¢–°–¢–í–ò–ï+–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–û–ö
@client.message_handler(func=lambda c: c.text == '/start')
def start(message):
	mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?!'
	client.send_message(message.chat.id, mess, parse_mode='html')
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	btn_start = types.InlineKeyboardButton('/start')
	btn_movie_ser = types.InlineKeyboardButton('–§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª')
	btn_rnd_movie = types.InlineKeyboardButton('C–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª')
	btn_rnd_actor = types.InlineKeyboardButton('C–ª—É—á–∞–π–Ω—ã–π –∞–∫—Ç–µ—Ä')
	btn_actor = types.InlineKeyboardButton('–ê–∫—Ç–µ—Ä')
	KPoisk = types.InlineKeyboardButton('–ö–∞–∫ —Å–º–æ—Ç—Ä–µ—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ???')
	FF = types.InlineKeyboardButton('–ü—Ä–µ–º—å–µ—Ä—ã –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ')
	markup.add(btn_movie_ser, btn_actor)
	markup.add(btn_rnd_movie, btn_rnd_actor)
	markup.add(FF)
	markup.row(KPoisk)
	client.send_message(message.chat.id, 'üëã', reply_markup=markup)


#                                                –§–£–ù–ö–¶–ò–Ø(–ö–ù–û–ü–ö–ê) –†–ê–ù–î–û–ú–ù–´–ô –§–ò–õ–¨–ú
@client.message_handler(func=lambda c: c.text == "C–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª")
def rand_film(message):
	name = random.choice(data['movie'])
	for i in range(len(data)):
		if clear_msg(name) == clear_msg(data['movie'][i]):
			client.send_message(message.chat.id,
								f"‚óè  –ù–∞–∑–≤–∞–Ω–∏–µ: [{data.loc[i][1].replace(';', ',')}]({clean_link(data.loc[i][9])})\n‚óè  –ì–æ–¥: {data.loc[i][2]}\n‚óè  –°—Ç—Ä–∞–Ω–∞: {data.loc[i][3]}\n‚óè  –†–µ–π—Ç–∏–Ω–≥: {round(data.loc[i][4], 2)}\n‚óè  –†–µ–∂–∏—Å—Å–µ—Ä: {data.loc[i][6].replace(';', ',')}\n‚óè  –û–ø–µ—Ä–∞—Ç–æ—Ä: {data.loc[i][7].replace(';', ',')}\n‚óè  –ê–∫—Ç–µ—Ä—ã: {data.loc[i][8].replace(';', ',')}\n‚óè  –û–ø–∏—Å–∞–Ω–∏–µ: {data.loc[i][5].replace(';', '')}\n‚óè  –ö–∏–Ω–æ–ø–æ–∏—Å–∫: https://www.kinopoisk.ru/film/{re.sub('[^0-9]', '', data.loc[i][9].replace('_', ' '))[3:]} ", parse_mode='Markdown')


#                      							 –ì–∞–π–¥
@client.message_handler(func=lambda c: c.text == "–ö–∞–∫ —Å–º–æ—Ç—Ä–µ—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ???")
def kino_guied(message):
	# client.send_sticker(
		# message.chat.id, 'CAACAgIAAxkBAAEEXjJiSwfIw1ah_TA_UvVJpESIffzeoQACOwMAArVx2gYYSwbSVVPLRCME')
	client.send_message(message.chat.id, CFG.QQ)
	# client.send_message(message, "Aboba")
#                      							 –§–ò–õ–¨–ú/–°–ï–†–ò–ê–õ


@client.message_handler(func=lambda c: c.text == "–§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª")
def film_ser(message):
	# client.send_sticker(
	# 	message.chat.id, 'CAACAgIAAxkBAAEEYgABYkyX0Kr38I_YdHOwiricZqzI4MoAAvgSAAJCTllKAAFziHtpqojNIwQ')
	client.send_message(
		message.chat.id, '–ü—Ä–∏–≥–æ—Ç–æ–≤—å –≤–∫—É—Å–Ω—è—à–µ–∫!\n–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞...\n‚¨áÔ∏è‚¨áÔ∏è‚¨á')

#                      							 HELP —Ñ—É–Ω–∫—Ü–∏—è


@client.message_handler(func=lambda c: c.text == "/help")
def help(message):
	# client.send_sticker(
	# 	message.chat.id, 'CAACAgIAAxkBAAEEXqhiSxYKOT32r_p8GIlLxTkee_QCQgACJyAAAulVBRjTVPZqymtoFyME')
	client.send_message(message.chat.id, '–ó–∞–ø—É—Ç–∞–ª–∏—Å—å –≤ –∫–Ω–æ–ø–∫–∞—Ö?\n\n‚óè  –§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª--–≤—ã–≤–æ–¥–∏—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª, —á—Ç–æ –≤–∞–º –Ω—É–∂–µ–Ω!\n‚óè  C–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª--–µ—Å–ª–∏ –≤–∞–º –Ω–µ—á–µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ –∏—â–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è.\n‚óè  –ê–∫—Ç–µ—Ä--–≤—ã–≤–æ–¥–∏—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ê–∫—Ç–µ—Ä–∞/–ê–∫—Ç—Ä–∏—Å—Å—É.\n‚óè  –°–ª—É—á–∞–π–Ω—ã–π –ê–∫—Ç–µ—Ä--–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º –ê–∫—Ç–µ—Ä–æ–º/–ê–∫—Ç—Ä–∏—Å—Å–æ–π, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ –∏—â–∏—Ç–µ —Ñ–∏–ª—å–º—ã —Å –∏—Ö —É—á–∞—Å—Ç–∏–µ–º!')



#												 –ü—Ä–µ–º—å–µ—Ä—ã –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ
@client.message_handler(func=lambda c: c.text == "–ü—Ä–µ–º—å–µ—Ä—ã –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ")
def primers(message):
	# print(cinema_primers_data(CFG.kinomax_link))
	client.send_message(message.chat.id, primers_data)
	


#                      							 –†–ê–ù–î–û–ú–ù–´–ï –ê–ö–¢–ï–†–´
@client.message_handler(func=lambda c: c.text == "C–ª—É—á–∞–π–Ω—ã–π –∞–∫—Ç–µ—Ä")
def acrtist(message):
	st_act = []
	for i in range(len(data)):
		st_act.append(data['actors'][i].split(';'))
	set_actors = list(set([x for l in st_act for x in l]))
	act = random.choice(set_actors)
	actor = f"–§–∏–ª—å–º—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏–≥—Ä–∞–ª(–∞) {act}\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
	client.send_message(message.chat.id, actor, parse_mode='html')
	for i in range(len(data)):
		if clear_msg(act) in clear_msg(data['actors'][i]):
			client.send_message(message.chat.id,
								f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.loc[i][1].replace(';', ',')}\n–†–µ–π—Ç–∏–Ω–≥: {round(data.loc[i][4], 2)}")


@client.message_handler(func=lambda c: c.text == "–ê–∫—Ç–µ—Ä")
def acrtist__1(message):
	# client.send_sticker(
	# 	message.chat.id, 'CAACAgIAAxkBAAEEYadiTH_B6nbGGJCzxkPXPqbSlieFxgACQQIAAs4XpwuAhLkjXAPfNSME')
	what_actor = '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞/–∞–∫—Ç—Ä–∏—Å—ã...\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è'
	client.send_message(message.chat.id, what_actor, parse_mode='html')


#                                                         –†–ê–°–ü–û–ó–ù–û–í–ê–ù–ò–ï –§–ò–õ–¨–ú–û–í

@client.message_handler(content_types=["text"])
def start(message):
	found = False
	kino = Kinopoisk(CFG.KINOPOIS_API_KEY)
	film = kino.search(message.text)

	if film and film['count']:
		found = True
		client.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...')
		client.send_message(message.chat.id,
							f"‚óè  –ù–∞–∑–≤–∞–Ω–∏–µ: [{film['name']}]({film['photo']})\n‚óè  –ì–æ–¥: {film['year']}\n‚óè  –°—Ç—Ä–∞–Ω–∞: {', '.join(film['country'])}\n‚óè  –†–µ–π—Ç–∏–Ω–≥: {film['rating']}\n‚óè  –†–µ–∂–∏—Å—Å–µ—Ä: {film['director']}\n‚óè  –ê–∫—Ç–µ—Ä—ã: {', '.join(film['actors'])}\n‚óè  –û–ø–∏—Å–∞–Ω–∏–µ: {film['description']}\n‚óè  –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {film['link']}",
							parse_mode='Markdown')
	# print(*film['actors'],sep=', ')
	# print(film)
	else:
		actor = kino.search(message.text, actor=True)
		if actor:
			found = True
			client.send_message(
				message.chat.id, f"‚óè  –ò–º—è: [{actor['name']}]({actor['posterUrl']})\n‚óè  –§–∏–ª—å–º—ã: {', '.join(actor['films'])}\n‚óè  –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {actor['kinlink']}", parse_mode='Markdown')

	if not found:
		client.send_message(
			message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")


print('start')

if __name__ == '__main__':
    client.polling(none_stop=True)